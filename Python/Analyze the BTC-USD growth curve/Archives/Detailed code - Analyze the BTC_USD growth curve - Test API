{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPOU7EWBYcvk/KkKOBU9i2h"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["num_list = [5, 2, 8, 1, 9]\n","\n","def second_largest(numbers):\n","    if len(numbers) < 2:\n","        return -1\n","    else:\n","        largest = max(numbers)\n","        numbers.remove(largest)\n","        second_largest = max(numbers)\n","        return second_largest\n","\n","print(second_largest(num_list))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_hIq7_jOIb4y","executionInfo":{"status":"ok","timestamp":1678883115561,"user_tz":-60,"elapsed":523,"user":{"displayName":"Féliz Luberne","userId":"12380412082249535875"}},"outputId":"f2198da4-05ff-4fea-9d73-7c47c15c2222"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["8\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mE_7jfJUoqXx","executionInfo":{"status":"ok","timestamp":1677380914014,"user_tz":-60,"elapsed":3929,"user":{"displayName":"Féliz Luberne","userId":"12380412082249535875"}},"outputId":"7321f31f-e1f4-47b1-b307-0f66ca1c1f51"},"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: alpaca-trade-api in /usr/local/lib/python3.8/dist-packages (2.3.0)\n","Requirement already satisfied: requests<3,>2 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (2.25.1)\n","Requirement already satisfied: aiohttp==3.8.1 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (3.8.1)\n","Requirement already satisfied: numpy>=1.11.1 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (1.22.4)\n","Requirement already satisfied: pandas>=0.18.1 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (1.3.5)\n","Requirement already satisfied: websocket-client<2,>=0.56.0 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (1.5.1)\n","Requirement already satisfied: websockets<11,>=9.0 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (10.4)\n","Requirement already satisfied: PyYAML==6.0 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (6.0)\n","Requirement already satisfied: deprecation==2.1.0 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (2.1.0)\n","Requirement already satisfied: msgpack==1.0.3 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (1.0.3)\n","Requirement already satisfied: urllib3<2,>1.24 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (1.24.3)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (22.2.0)\n","Requirement already satisfied: charset-normalizer<3.0,>=2.0 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (2.1.1)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (6.0.4)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (1.3.3)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (1.3.1)\n","Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (4.0.2)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (1.8.2)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.8/dist-packages (from deprecation==2.1.0->alpaca-trade-api) (23.0)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=0.18.1->alpaca-trade-api) (2022.7.1)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=0.18.1->alpaca-trade-api) (2.8.2)\n","Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests<3,>2->alpaca-trade-api) (4.0.0)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests<3,>2->alpaca-trade-api) (2.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests<3,>2->alpaca-trade-api) (2022.12.7)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.8/dist-packages (from python-dateutil>=2.7.3->pandas>=0.18.1->alpaca-trade-api) (1.15.0)\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import matplotlib as mpt\n","import sklearn as skn\n","!pip install alpaca-trade-api\n","import alpaca_trade_api as tradeapi\n","import datetime as dtm"]},{"cell_type":"code","source":["# initialisation de l'API\n","api = tradeapi.REST('votre clé API', 'votre clé secrète', base_url='https://www.binance.com/en/trade/BTC_USDT?theme=dark&type=spot')\n","\n","# récupération de l'historique des prix de l'actif AAPL sur une période de 1 an\n","barset = api.get_barset('AAPL', '1D', limit=252)\n","aapl_bars = barset['AAPL']\n","\n","# calcul de la moyenne mobile sur 50 jours\n","sma50 = 0\n","for i in range(50):\n","    sma50 += aapl_bars[i].c\n","sma50 /= 50\n","\n","# calcul de la moyenne mobile sur 200 jours\n","sma200 = 0\n","for i in range(200):\n","    sma200 += aapl_bars[i].c\n","sma200 /= 200\n","\n","# affichage des résultats\n","print(\"AAPL :\")\n","print(f\"SMA50 : {sma50}\")\n","print(f\"SMA200 : {sma200}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":236},"id":"CA5q8C5xrBud","executionInfo":{"status":"error","timestamp":1677380756573,"user_tz":-60,"elapsed":308,"user":{"displayName":"Féliz Luberne","userId":"12380412082249535875"}},"outputId":"e804d7cd-c2e0-443e-c066-42cda2155e0e"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-12-164aba9c568b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;31m# récupération de l'historique des prix de l'actif AAPL sur une période de 1 an\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mbarset\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mapi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_barset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'AAPL'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'1D'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlimit\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m252\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0maapl_bars\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbarset\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'AAPL'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'REST' object has no attribute 'get_barset'"]}]},{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import matplotlib as mpt\n","import sklearn as skn\n","!pip install alpaca-trade-api\n","import alpaca_trade_api as tradeapi\n","import datetime as dt\n","\n","# initialisation de l'API\n","api = tradeapi.REST('votre clé API', 'votre clé secrète', base_url='https://api.binance.com')\n","\n","# récupération de l'historique des prix de l'actif AAPL sur une période de 1 an\n","symbol = 'AAPL'\n","interval = '1d'\n","start_time = int((datetime.now() - timedelta(days=365)).timestamp() * 1000)\n","end_time = int(datetime.now().timestamp() * 1000)\n","trades = api.get_aggregate_trades_list(symbol=symbol, interval=interval, start_time=start_time, end_time=end_time)\n","\n","# conversion des données en une liste de prix de clôture\n","close_prices = []\n","for trade in trades:\n","    close_prices.append(float(trade.price))\n","\n","# calcul de la moyenne mobile sur 50 jours\n","sma50 = sum(close_prices[-50:]) / 50\n","\n","# calcul de la moyenne mobile sur 200 jours\n","sma200 = sum(close_prices[-200:]) / 200\n","\n","# affichage des résultats\n","print(f\"Actif : {symbol}\")\n","print(f\"SMA50 : {sma50}\")\n","print(f\"SMA200 : {sma200}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":687},"id":"z_UzDsvEsGeE","executionInfo":{"status":"error","timestamp":1677381064230,"user_tz":-60,"elapsed":6596,"user":{"displayName":"Féliz Luberne","userId":"12380412082249535875"}},"outputId":"0596f604-a95b-4e6f-bf80-d2483abf6995"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: alpaca-trade-api in /usr/local/lib/python3.8/dist-packages (2.3.0)\n","Requirement already satisfied: websockets<11,>=9.0 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (10.4)\n","Requirement already satisfied: deprecation==2.1.0 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (2.1.0)\n","Requirement already satisfied: pandas>=0.18.1 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (1.3.5)\n","Requirement already satisfied: numpy>=1.11.1 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (1.22.4)\n","Requirement already satisfied: PyYAML==6.0 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (6.0)\n","Requirement already satisfied: aiohttp==3.8.1 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (3.8.1)\n","Requirement already satisfied: msgpack==1.0.3 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (1.0.3)\n","Requirement already satisfied: websocket-client<2,>=0.56.0 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (1.5.1)\n","Requirement already satisfied: requests<3,>2 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (2.25.1)\n","Requirement already satisfied: urllib3<2,>1.24 in /usr/local/lib/python3.8/dist-packages (from alpaca-trade-api) (1.24.3)\n","Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (4.0.2)\n","Requirement already satisfied: charset-normalizer<3.0,>=2.0 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (2.1.1)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (1.3.1)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (6.0.4)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (22.2.0)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (1.3.3)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.8/dist-packages (from aiohttp==3.8.1->alpaca-trade-api) (1.8.2)\n","Requirement already satisfied: packaging in /usr/local/lib/python3.8/dist-packages (from deprecation==2.1.0->alpaca-trade-api) (23.0)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=0.18.1->alpaca-trade-api) (2022.7.1)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.8/dist-packages (from pandas>=0.18.1->alpaca-trade-api) (2.8.2)\n","Requirement already satisfied: idna<3,>=2.5 in /usr/local/lib/python3.8/dist-packages (from requests<3,>2->alpaca-trade-api) (2.10)\n","Requirement already satisfied: chardet<5,>=3.0.2 in /usr/local/lib/python3.8/dist-packages (from requests<3,>2->alpaca-trade-api) (4.0.0)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.8/dist-packages (from requests<3,>2->alpaca-trade-api) (2022.12.7)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.8/dist-packages (from python-dateutil>=2.7.3->pandas>=0.18.1->alpaca-trade-api) (1.15.0)\n"]},{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-18-c6027268a848>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m     13\u001b[0m \u001b[0msymbol\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'AAPL'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m \u001b[0minterval\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'1d'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m \u001b[0mstart_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mtimedelta\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdays\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m365\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0mend_time\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdatetime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnow\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtimestamp\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;36m1000\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m \u001b[0mtrades\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mapi\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_aggregate_trades_list\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msymbol\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0msymbol\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minterval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minterval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstart_time\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mstart_time\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mend_time\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mend_time\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'datetime' is not defined"]}]},{"cell_type":"markdown","source":["# 1) Générateur de mdp"],"metadata":{"id":"7_GQjN1q6FUA"}},{"cell_type":"markdown","source":["## 1.1)"],"metadata":{"id":"-SZemV1b6IXY"}},{"cell_type":"code","source":["import random\n","import string\n","\n","def generate_password(length):\n","    \"\"\"Génère un mot de passe aléatoire avec une longueur donnée.\"\"\"\n","    # Définition des caractères possibles\n","    characters = string.ascii_letters + string.digits + string.punctuation\n","\n","    # Générer un mot de passe aléatoire\n","    password = ''.join(random.choice(characters) for i in range(length))\n","\n","    return password\n","\n","# Exemple d'utilisation : générer un mot de passe de longueur 10"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0KKn_rq03bGX","executionInfo":{"status":"ok","timestamp":1678273018058,"user_tz":-60,"elapsed":6,"user":{"displayName":"Féliz Luberne","userId":"12380412082249535875"}},"outputId":"9ded4c16-4d42-424c-9eb3-884a31e59ef0"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["RQCq<E(dI_\n"]}]},{"cell_type":"code","source":["generate_password(24)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"YXsl4TNF3gWc","executionInfo":{"status":"ok","timestamp":1678273048570,"user_tz":-60,"elapsed":375,"user":{"displayName":"Féliz Luberne","userId":"12380412082249535875"}},"outputId":"92568e4d-d26f-4c78-e57e-b48a37597a7e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"iG+LCb!bN2PY}gQy)'SKD_^k\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":2}]},{"cell_type":"markdown","source":["##1.2)"],"metadata":{"id":"TQIo1aRx6Lzs"}},{"cell_type":"code","source":["import random\n","import string\n","import hashlib\n","\n","def generate_salt(length=16):\n","    \"\"\"Génère un sel aléatoire.\"\"\"\n","    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))\n","\n","def hash_password(password, salt):\n","    \"\"\"Hache le mot de passe avec le sel donné.\"\"\"\n","    salted_password = password.encode() + salt.encode()\n","    hashed_password = hashlib.sha512(salted_password).hexdigest()  # Changed from 'hashed_password' to 'salted_password'\n","    return hashed_password\n","\n","def generate_password(length=16):\n","    \"\"\"Génère un mot de passe aléatoire.\"\"\"\n","    # Définition des caractères possibles\n","    characters = string.ascii_letters + string.digits + string.punctuation\n","\n","    # Générer un mot de passe aléatoire\n","    password = ''.join(random.choice(characters) for _ in range(length))\n","\n","    # Générer un sel aléatoire\n","    salt = generate_salt()\n","\n","    # Hacher le mot de passe avec le sel\n","    hashed_password = hash_password(password, salt)\n","\n","    return hashed_password, salt\n","\n","# Exemple d'utilisation : générer un mot de passe de longueur 16\n","hashed_password, salt = generate_password(16)\n","print(\"Mot de passe haché : \", hashed_password)\n","print(\"Sel : \", salt)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QD7_vkJ34auU","executionInfo":{"status":"ok","timestamp":1678273575831,"user_tz":-60,"elapsed":394,"user":{"displayName":"Féliz Luberne","userId":"12380412082249535875"}},"outputId":"49450a27-548f-4c63-bf14-641c0089ff94"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mot de passe haché :  2045169143d698195fd4a9d8bb9360da695602b39f9f091c07549854af585e01e4f3f1b6841095648ca3ae1949c850339da70a2b5c4fec41d21044d06bd9fd9b\n","Sel :  RKErrmiTnvtboeoN\n"]}]},{"cell_type":"markdown","source":["##1.3)"],"metadata":{"id":"q4OuQOIB6QHV"}},{"cell_type":"code","source":["import random\n","import string\n","import hashlib\n","\n","def generate_salt(length=16):\n","    \"\"\"Génère un sel aléatoire.\"\"\"\n","    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))\n","\n","def hash_password(password, salt):\n","    \"\"\"Hache le mot de passe avec le sel donné.\"\"\"\n","    salted_password = password.encode() + salt.encode()\n","    hashed_password = hashlib.sha512(salted_password).hexdigest()\n","    return hashed_password\n","\n","def generate_password(length=16, enforce_policy=True):\n","    \"\"\"Génère un mot de passe aléatoire et vérifie qu'il respecte la politique de mot de passe.\"\"\"\n","    # Définition des caractères possibles\n","    characters = string.ascii_letters + string.digits + string.punctuation\n","\n","    # Générer un mot de passe aléatoire\n","    password = ''.join(random.choice(characters) for _ in range(length))\n","\n","    # Vérifier que le mot de passe respecte la politique de mot de passe\n","    if enforce_policy and not is_strong_password(password):\n","        raise ValueError(\"Le mot de passe doit contenir au moins 8 caractères, au maximum 30 caractères dont au moins une lettre minuscule, une lettre majuscule, un chiffre et un caractère spécial\")\n","\n","    # Générer un sel aléatoire\n","    salt = generate_salt()\n","\n","    # Hacher le mot de passe avec le sel\n","    hashed_password = hash_password(password, salt)\n","\n","    return hashed_password, salt\n","\n","def is_strong_password(password):\n","    \"\"\"Vérifie que le mot de passe respecte les critères de complexité.\"\"\"\n","    if len(password) < 8:\n","        return False\n","    if len(password) > 30:\n","        return False\n","    if not any(c.islower() for c in password):\n","        return False\n","    if not any(c.isupper() for c in password):\n","        return False\n","    if not any(c.isdigit() for c in password):\n","        return False\n","    if not any(c in string.punctuation for c in password):\n","        return False\n","    return True\n","\n","# Exemple d'utilisation : générer un mot de passe de longueur 16\n","try:\n","    hashed_password, salt = generate_password(16)\n","    print(\"Mot de passe haché : \", hashed_password)\n","    print(\"Sel : \", salt)\n","except ValueError as e:\n","    print(str(e))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"U8jCsgTT6TBp","executionInfo":{"status":"ok","timestamp":1678274085149,"user_tz":-60,"elapsed":352,"user":{"displayName":"Féliz Luberne","userId":"12380412082249535875"}},"outputId":"8b407359-2b48-43cd-8651-ab12b1a4167b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Le mot de passe doit contenir au moins 8 caractères, au maximum 30 caractères dont au moins une lettre minuscule, une lettre majuscule, un chiffre et un caractère spécial\n"]}]},{"cell_type":"code","source":["try:\n","    hashed_password, salt = generate_password(16)\n","    print(\"Mot de passe haché : \", hashed_password)\n","    print(\"Sel : \", salt)\n","except ValueError as e:\n","    print(str(e))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lAwJgv6E6tOk","executionInfo":{"status":"ok","timestamp":1678273968459,"user_tz":-60,"elapsed":401,"user":{"displayName":"Féliz Luberne","userId":"12380412082249535875"}},"outputId":"6529c4e5-5858-4988-8659-26594ec22458"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mot de passe haché :  799b91ea30ec9aa1dcee4c7a97a3824aad790ad13f1ae4de137f03263a1bfb4fc658fa18644471c611c980568cf811673747000b59b883ad5e9a97b90eaa0f2e\n","Sel :  3dHnlFVMqYMaZfgV\n"]}]},{"cell_type":"markdown","source":["##1.4)"],"metadata":{"id":"feThyBpa8btQ"}},{"cell_type":"code","source":["import re\n","\n","def check_password_strength(password):\n","    # Vérifier la longueur minimale\n","    if len(password) < 8:\n","        return f\"Le nombre de caractère minimum n'est pas respecté (8) dans le mot de passe suivant : {password}\"\n","\n","    # Vérifier la présence de chiffres\n","    if not re.search(r'\\d', password):\n","        return f\"Le mot de passe doit contenir au moins un chiffre : {password}\"\n","\n","    # Vérifier la présence de lettres majuscules\n","    if not re.search(r'[A-Z]', password):\n","        return f\"Le mot de passe doit contenir au moins une lettre majuscule : {password}\"\n","\n","    # Vérifier la présence de lettres minuscules\n","    if not re.search(r'[a-z]', password):\n","        return f\"Le mot de passe doit contenir au moins une lettre minuscule : {password}\"\n","\n","    # Vérifier la présence de caractères spéciaux\n","    if not re.search(r'[ !\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~]', password):\n","        return f\"Le mot de passe doit contenir au moins un caractère spécial : {password}\"\n","\n","    # Si toutes les conditions sont remplies, renvoyer un message de confirmation\n","    return f\"Le mot de passe '{password}' est correct\"\n"],"metadata":{"id":"ErEliz528fjG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["password = salt\n","result = check_password_strength(password)\n","print(result)  # Le nombre de caractère minimum n'est pas respecté (8) dans le mot de passe suivant : Bii58xP"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pq-usnTI8jsS","executionInfo":{"status":"ok","timestamp":1678274363738,"user_tz":-60,"elapsed":445,"user":{"displayName":"Féliz Luberne","userId":"12380412082249535875"}},"outputId":"689fa5b8-b3f9-429f-8f1c-2550ae6e55ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Le mot de passe doit contenir au moins un caractère spécial : j5eT5dx7dP1Y3xNA\n"]}]}]}